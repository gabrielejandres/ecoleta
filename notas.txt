** Nodejs ** 

// Rota: endereço completo da requisição
// Recurso: Qual entidade estamos acessando do sistema

/* Tipos de parâmetros */
// Request Params: Parâmetros que vem na própria rota que identificam um recurso
// Query Param: Parâmetros que vem na própria rota geralmente opcionais para filtros, paginação
// Request Body: Parâmetros para criação e atualização de informações

Exemplos:
// query params
app.get('/users', (request, response) => {
    const search = String(request.query.search);

    const filteredUsers = search ? users.filter(user => user.includes(search)) : users;

    response.json(filteredUsers);
});

// request params
app.get('/users/:id', (request, response) => {
    const id = Number(request.params.id);

    const user = users[id];

    return response.json(user);
});

// request body
app.post('/users', (request, response) => {
    const data = request.body;
    const user = {
        name: data.name,
        email: data.email,
    };

    return response.json(user);
});

/* Entidades */
points: pontos de coleta
	->image
	->name
	->email
	->whatsapp
	->latitude
	->longitude
	->city
	->uf

items: itens para coleta
	-> title
	-> image
point_items: pivot que armazena o relacionamento
	-> point_id
	-> item_id

/* Migrations */
Histórico do banco de dados
Migrations determinam o que será feito no projeto: criação de tabelas, alteração, deleção, etc

/* Funcionalidades */
Cadastro de ponto de coleta
Listar itens de coleta
Listar pontos de coleta (filtro por cidade, estado e itens)
Listar um ponto de coleta específico

/* Padrão nomes de métodos */
index: listagem
show: exibir um único registro
create: criar registro
update: atualizar registro
delete: deletar registro

** ReactJS **

Utilizando os arquivos index.tsx e index.html o conteúdo do app é carregado dentro da div root

JSX: Escrever HTML dentro do JS/TS. Sintaxe de XML dentro do JavaScript.

Componentes: Aplicação dividida em pequenos blocos que se repetem dentro da aplicação. Propriedades: São atributos do componente:

import React from 'react';

interface HeaderProps {
    title: string;
}

const Header: React.FC<HeaderProps> = (props) => {
    return (
        <header>
            <h1> { props.title } </h1>
        </header>
    );
}

export default Header; 

Estado: No react existe o conceito de imutabilidade, então para refletir dentro do HTML as mudanças em uma variável, temos que utilizar o conceito de estado:

const [ counter, setCounter ] = useState(0); // retorna um array [ valor do estado, função para atualizar o valor do estado ]

  function handleButtonClick() {
    setCounter(counter + 1);
  }

  return (
      <div>
        <Header title="Hello world"/>

        <h1> { counter } </h1>
        <button type="button" onClick={handleButtonClick}>Aumentar</button>
      </div>
  );

/* Bibliotecas */
npm install react-icons
npm install react-router-dom

Maps: npm install leaflet / npm install react-leaflet

API de Estados e Cidades: utilizar o axios com o link da API do IBGE

Integração nodejs e reactjs: npm install axios

OBS: Sempre que criamos um estado para array ou objeto temos que informar manualmente o tipo da variável.

** React Native **
npm install -g expo-cli : permite utilizar comandos expo no projeto
expo init mobile
cd mobile
npm start

* As tags HTML não são válidas em react native. Devem ser usados os componentes view e text do react native.
* As estilizações são feitas utilizando a propriedade style dos componentes. 
* As propriedades CSS são escritas com cammelCase. Exemplo: backgroundColor
* Todos os elementos são display flex por padrão.

Mapas: expo install react-native-maps
Geolocalização: expo install expo-location
Envio de e-mails: expo install expo-mail-composer